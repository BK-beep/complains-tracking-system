name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test-config:
    name: Build and Test ConfigServiceApplication
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'adopt'

      - name: Grant execute permission for mvnw
        run: chmod +x */mvnw

      - name: Build and Test ConfigServiceApplication
        working-directory: config-service
        run: ./mvnw clean install

  build-and-test-discovery:
    name: Build and Test DiscoveryServiceApplication
    runs-on: ubuntu-latest
    needs: build-and-test-config
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'adopt'

      - name: Grant execute permission for mvnw
        run: chmod +x */mvnw

      - name: Start Config Server
        run: docker run -d -p 8888:8888 your-docker-image-for-config-server

      - name: Build and Test DiscoveryServiceApplication
        working-directory: discovery-service
        run: ./mvnw clean install

  build-and-test-apigateway:
    name: Build and Test ApiGatewayKeycloakApplication
    runs-on: ubuntu-latest
    needs: build-and-test-config
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Grant execute permission for mvnw
        run: chmod +x */mvnw

      - name: Build and Test ApiGatewayKeycloakApplication
        working-directory: ApiGatewayKeycloak
        run: ./mvnw clean install

  build-and-test-es-search:
    name: Build and Test EsSearchApiApplication
    runs-on: ubuntu-latest
    needs: build-and-test-discovery
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Grant execute permission for mvnw
        run: chmod +x */mvnw

      - name: Build and Test EsSearchApiApplication
        working-directory: ESSearchAPI
        run: ./mvnw clean install

  build-and-test-kafka-consumer:
    name: Build and Test KafkaComplaintsConsumerApplication
    runs-on: ubuntu-latest
    needs: build-and-test-es-search
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Grant execute permission for mvnw
        run: chmod +x */mvnw

      - name: Build and Test KafkaComplaintsConsumerApplication
        working-directory: kafka-complaints-consumer
        run: ./mvnw clean install

  build-and-test-kafka-producer:
    name: Build and Test KafkaComplaintsProducerApplication
    runs-on: ubuntu-latest
    needs: build-and-test-kafka-consumer
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'adopt'

      - name: Grant execute permission for mvnw
        run: chmod +x */mvnw

      - name: Build and Test KafkaComplaintsProducerApplication
        working-directory: kafka-complaints-producer
        run: ./mvnw clean install

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test-kafka-producer
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker Images
        run: |
          for file in docker-compose*.yml; do
            docker-compose -f $file build
          done

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker Images
        run: |
          for file in docker-compose*.yml; do
            docker-compose -f $file push
          done

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Deploy Microservices
        run: echo "Deploy to production logic here."
